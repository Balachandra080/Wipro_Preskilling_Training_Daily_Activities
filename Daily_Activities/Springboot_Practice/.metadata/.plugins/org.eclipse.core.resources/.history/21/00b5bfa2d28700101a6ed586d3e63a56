package com.gl.jpa.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.gl.jpa.model.Product;
import com.gl.jpa.service.ProductService;

@RestController
public class ProductController {

    @Autowired
    ProductService productService;

    // ---------------- CREATE ----------------
    @PostMapping("/product/add")
    public ResponseEntity<Product> add(@RequestParam String name, @RequestParam double price) {
        Product product = new Product(name, price);
        productService.add(product);
        return ResponseEntity.status(HttpStatus.OK).body(product);
    }

    // ---------------- READ ALL ----------------
    @GetMapping("/product/getall")
    public ResponseEntity<List<Product>> getAll() {
        List<Product> products = productService.getAll();
        return ResponseEntity.status(HttpStatus.OK).body(products);
    }

    // ---------------- READ BY ID ----------------
    @GetMapping("/product/getbyid")
    public ResponseEntity<?> getById(@RequestParam int id) {
        try {
            Product product = productService.getById(id);
            if (product != null) {
                return ResponseEntity.status(HttpStatus.OK).body(product);
            }
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Product not found");
        } catch (Exception ex) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Product not found");
        }
    }
    
    

    // ---------------- UPDATE ----------------
    @PutMapping("/product/update")
    public ResponseEntity<String> update(@RequestParam int id, 
                                         @RequestParam String name, 
                                         @RequestParam double price) {
        Product product = new Product(name, price);
        product.setId(id);
        productService.update(product);
        return ResponseEntity.status(HttpStatus.OK).body("Product updated successfully");
    }

    // ---------------- DELETE ----------------
    @DeleteMapping("/product/delete")
    public ResponseEntity<String> delete(@RequestParam int id) {
        productService.delete(id);
        return ResponseEntity.status(HttpStatus.OK).body("Product deleted successfully");
    }
}

package com.gl.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@Configuration
public class SecurityConfig {

    @Autowired
    CustomUserDetailService customUserDetailService;

    // Encrypt the password
    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // Authentication
    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(customUserDetailService);  // loading the user from service file
        authProvider.setPasswordEncoder(passwordEncoder());           // setting the encrypt algorithm
        return authProvider;
    }

    // Authorization (yet to be added)
    @Bean
    public SecurityFilterChain  securityFilterChain(HttpSecurity http) throws Exception {
    	
    	http.csrf(csrf -> csrf.disable() ).authorizeHttpRequests(auth -> auth
    			.requestMatchers("/create-user").permitAll()
    			.requestMatchers("/create-role").permitAll()
    			.requestMatchers("/admin/**").hasRole("admin")
    			.requestMatchers("/student/**").hasRole("student")
    			.anyRequest().authenticated()
    			).httpBasic();
    	
    	return http.build();
    }
}

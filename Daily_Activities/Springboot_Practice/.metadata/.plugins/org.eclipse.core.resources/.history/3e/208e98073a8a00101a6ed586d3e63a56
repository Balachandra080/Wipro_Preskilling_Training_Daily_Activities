package com.gl.security;

import java.security.Key;
import java.util.Date;
import java.util.Map;
import java.util.function.Function;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;

@Service
public class JWTService {

    private final Key key;
    private final long expirationMs;

    public JWTService(
            @Value("${app.jwt.secret}") String secret,
            @Value("${app.jwt.expiration-ms}") long expirationMs) {

        this.key = Keys.hmacShaKeyFor(secret.getBytes()); // convert secret string to Key
        this.expirationMs = expirationMs;
    }

    // Generate token
    public String generateToken(String username, Map<String, Object> claims) {
        return Jwts.builder()
                .claims(claims)                       // ✅ new style
                .subject(username)                    // ✅ replaces setSubject
                .issuedAt(new Date())                 // ✅ replaces setIssuedAt
                .expiration(new Date(System.currentTimeMillis() + expirationMs)) // ✅ replaces setExpiration
                .signWith(key)                        // ✅ new signWith(Key)
                .compact();
    }

    // Extract claims
    public <T> T extractClaim(String token, Function<Claims, T> resolver) {
        Claims claims = Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
                .getBody();
        return resolver.apply(claims);
    }

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public boolean isTokenExpired(String token) {
        Date expDate = extractClaim(token, Claims::getExpiration);
        return expDate.before(new Date());
    }

    public boolean isTokenValid(String token, String username) {
        return extractUsername(token).equals(username) && !isTokenExpired(token);
    }
}

package com.gl.userclient.controller;

import java.util.HashMap;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.gl.userclient.model.User;
import com.gl.userclient.security.JwtUtil;
import com.gl.userclient.service.UserService;

@RestController
@RequestMapping("/user")
public class UserController {
	@Autowired
    private UserService userService;
	@Autowired
	private PasswordEncoder encoder;
	@Autowired
    private JwtUtil jwtUtil;
	

	@PostMapping("/register")
	public ResponseEntity register(@ModelAttribute User user ) {
	    try {
	        if (user.getPassword() != null && user.getPassword().isEmpty()) {
	            return ResponseEntity.badRequest().body("Password cannot be empty");
	        }
	        user.setPassword(encoder.encode(user.getPassword()));
	        User saveduser = userService.register(user);
	        return ResponseEntity.status(HttpStatus.OK).body("Succesfull");
	    } catch (Exception e) {
	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Registration failed: " + e.getMessage());
	    }
	}
	@PostMapping("/login")
	public ResponseEntity login(@ModelAttribute User loginRequest) {
	    try {
	        User user = userService.findByUsername(loginRequest.getUsername());

	        if (user != null && encoder.matches(loginRequest.getPassword(), user.getPassword())) {
	            String token = jwtUtil.generateToken(user.getUsername());
	            Map<String, String> response = new HashMap<>();
	            response.put("token", token);
	            return ResponseEntity.ok(response);
	        }

	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid username or password");
	    } catch (Exception e) {
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Login failed: " + e.getMessage());
	    }
	}
    @PostMapping("/logout")
    public Map<String, String> logout() {
        // Stateless JWT â€“ logout is handled client-side by deleting token
        Map<String, String> response = new HashMap<>();
        response.put("message", "Logout successful (delete token on client side)");
        return response;
    }
	
	

}
